// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DadosUsuario {
  id                Int           @id @default(autoincrement())
  nome              String
  email             String        @unique
  senha             String
  codigoRecuperacao Int?
  cpfCnpj           String
  telefone1         String
  telefone2         String?
  foto              String
  LogContrato       LogContrato[]
  clinica           Clinica?
  profissional      Profissional?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?

  @@map("dadosUsuarios")
}

model Clinica {
  id             String       @id @default(uuid()) @db.VarChar(36)
  dadosUsuario   DadosUsuario @relation(references: [id], fields: [dadosUsuarioId])
  dadosUsuarioId Int          @unique
  Terapeuta      Terapeuta[]
  Consulta       Consulta[]
  Legenda        Legenda[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  @@map("clinicas")
}

model Profissional {
  id             String       @id @default(uuid()) @db.VarChar(36)
  dadosUsuario   DadosUsuario @relation(references: [id], fields: [dadosUsuarioId])
  dadosUsuarioId Int          @unique
  Terapeuta      Terapeuta[]
  Consulta       Consulta[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  @@map("profissionais")
}

model Terapeuta {
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
  clinicaId String

  terapeuta   Profissional @relation(fields: [terapeutaId], references: [id])
  terapeutaId String

  createdAt DateTime @default(now())

  @@id([clinicaId, terapeutaId])
  @@map("terapeutas")
}

model Legenda {
  id        Int     @id @default(autoincrement())
  descricao String
  cor       String
  fixed     Boolean
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
  clinicaId String

  @@map("legendas")
}

model Plano {
  id          Int           @id @default(autoincrement())
  nome        String
  valor       Decimal       @db.Decimal(6, 2)
  LogContrato LogContrato[]
  deletedAt   DateTime?

  @@map("planos")
}

model LogContrato {
  id              Int          @id @default(autoincrement())
  usuario         DadosUsuario @relation(fields: [usuarioId], references: [id])
  usuarioId       Int
  plano           Plano        @relation(fields: [planoId], references: [id])
  planoId         Int
  dataContratacao DateTime
  dataExpiracao   DateTime
  createdAt       DateTime     @default(now())

  @@map("logContratos")
}

model Endereco {
  id          Int          @id @default(autoincrement())
  logradouro  String
  numero      String
  bairro      String
  cidade      String
  estado      String
  cep         String
  Responsavel Responsavel?

  @@map("enderecos")
}

model Responsavel {
  id                    String                  @id @default(uuid()) @db.VarChar(36)
  nome                  String
  email                 String
  cpf                   String
  telefone1             String
  telefone2             String?
  endereco              Endereco                @relation(fields: [enderecoId], references: [id])
  enderecoId            Int                     @unique
  ResponsavelDependente ResponsavelDependente[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?

  @@map("responsaveis")
}

model Dependente {
  id                    String                  @id @default(uuid()) @db.VarChar(36)
  nome                  String
  email                 String
  cpf                   String
  telefone1             String
  telefone2             String?
  ResponsavelDependente ResponsavelDependente[]
  Consulta              Consulta[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?

  @@map("pacientes")
}

model ResponsavelDependente {
  responsavel   Responsavel @relation(fields: [responsavelId], references: [id])
  responsavelId String
  dependente    Dependente  @relation(fields: [dependenteId], references: [id])
  dependenteId  String

  @@id([responsavelId, dependenteId])
  @@map("responsaveisDependentes")
}

model Consulta {
  id          Int          @id @default(autoincrement())
  Clinica     Clinica      @relation(fields: [clinicaId], references: [id])
  clinicaId   String
  terapeuta   Profissional @relation(fields: [terapeutaId], references: [id])
  terapeutaId String
  paciente    Dependente?  @relation(fields: [pacienteId], references: [id])
  pacienteId  String?
  dataInicio  DateTime
  dataFim     DateTime?
  detalhes    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("consultas")
}
